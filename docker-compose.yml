services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - RAILS_ENV=production
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - DB_PASSWORD=sua_senha
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=sua_senha
      - POSTGRES_DB=eduDB
      - DATABASE_URL=postgresql://postgres:200565@db:5432/eduDB
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      - ./backend:/rails
    expose:
      - "3000"
    entrypoint: ["sh", "./entrypoint.sh"]
    command: ["bin/rails", "s", "-b", "0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    expose:
      - "80"
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=eduDB
      - POSTGRES_PASSWORD=200565
      - POSTGRES_USER=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  npm_data:
  npm_letsencrypt: